Microsoft (R) Macro Assembler Version 14.28.29335.0	    11/09/21 12:29:19
lab2v4.asm						     Page 1 - 1


				;

				;this is the solution for the fifth exercise
				;conversion from Latin2 into Windows 1250
				;first check big letter, then check small letter

				.686
				.model flat
				extern _ExitProcess@4 : PROC
				extern __write : PROC ; (dwa znaki podkreœlenia)
				extern __read : PROC ; (dwa znaki podkreœlenia)
				extern _MessageBoxA@16 : PROC
				extern _MessageBoxW@16 : PROC
				public _main
 00000000			.data
 00000000 0A 57 72 69 74		tekst_pocz db 10, 'Write name and suuuurname'
	   65 20 6E 61 6D
	   65 20 61 6E 64
	   20 73 75 75 75
	   75 72 6E 61 6D
	   65
 0000001A  2C 20 74 68 65		db ', then press enter', 10
	   6E 20 70 72 65
	   73 73 20 65 6E
	   74 65 72 0A
 0000002D 00				koniec_t db ?
 0000002E  0000000A [			magazyn db 10 dup (?)
	    00
	   ]
 00000038  0000000A [			magazyn2 db 10 dup (?)
	    00
	   ]
 00000042 00				koniec_magazyn2 db ?

 00000043 00000000			liczba_znakow dd ?
 00000047 00000000			liczba_znakow2 dd ?
 0000004B 00000000			liczba_spacji dd ?
 0000004F 20 53 77 69 74		tytul db ' Switched words ',0
	   63 68 65 64 20
	   77 6F 72 64 73
	   20 00


 00000000			.code

 00000000			_main PROC
					; liczba znaków tekstu informacyjnego
 00000000  B9 0000002D			mov ecx,(OFFSET koniec_t) - (OFFSET tekst_pocz)
 00000005  51				push ecx
 00000006  68 00000000 R		push OFFSET tekst_pocz ; adres tekstu
 0000000B  6A 01			push 1 ; nr urz¹dzenia (tu: ekran - nr 1)
 0000000D  E8 00000000 E		call __write ; wyœwietlenie tekstu pocz¹tkowego
 00000012  83 C4 0C			add esp, 12 ; usuniecie parametrów ze stosu

					; czytanie wiersza z klawiatury
 00000015  6A 50			push 80 ; maksymalna liczba znaków
 00000017  68 0000002E R		push OFFSET magazyn
 0000001C  6A 00			push 0 ; nr urz¹dzenia (tu: klawiatura - nr 0)
 0000001E  E8 00000000 E		call __read ; czytanie znaków z klawiatury
 00000023  83 C4 0C			add esp, 12 ; usuniecie parametrów ze stosu
					
					; funkcja read wpisuje do rejestru EAX liczbê wprowadzonych znaków
 00000026  A3 00000043 R		mov liczba_znakow, eax
 0000002B  A3 00000047 R		mov liczba_znakow2, eax
 00000030  BF 00000000			mov edi,0;

 00000035				policzspacje:

 00000035  8A 97 0000002E R		mov dl, magazyn[edi]

 0000003B  80 FA 20			cmp dl, 20h 
 0000003E  75 06			jne niemaspacji
 00000040  FF 05 0000004B R		inc liczba_spacji ;dodaj spacje

 00000046				niemaspacji: ;przejscie do kolejnej petli

 00000046  83 C7 01			add edi,1 ;next index
 00000049  83 2D 00000043 R		sub liczba_znakow, 1
	   01
 00000050  75 E3			jnz policzspacje

 00000052  BB 00000000			mov ebx,0
 00000057  8B 1D 0000004B R		mov ebx,liczba_spacji

					; rejestr ECX pe³ni rolê licznika obiegów pêtli
 0000005D  B9 00000000			mov ecx,0
 00000062  83 2D 00000047 R		sub liczba_znakow2,1
	   01
 00000069  8B 0D 00000047 R		mov ecx, liczba_znakow2 ; prawa bariera
 0000006F  BB 00000000			mov ebx,0
 00000074  83 2D 00000047 R		sub liczba_znakow2,1
	   01
 0000007B  8B 1D 00000047 R		mov ebx, liczba_znakow2 ; lewa bariera
 00000081  BE 00000000			mov esi, 0 ; magazyn2 indeks pocz¹tkowy
 00000086  BF 00000000			mov edi, 0 ;dlugosc slowa

 0000008B			przepiszslowo: ;powaptrz tyle ile jest spacji

 0000008B  8A 93 0000002E R		wez_slowo: mov dl, magazyn[ebx] ; pobranie kolejnego znaku

 00000091				checkIfSpace: ;' '
 00000091  80 FA 20			cmp dl, 20h
 00000094  74 04			je foundSpace


					; sterowanie pêtl¹
 00000096  47				inc edi; ;dlugosc slowa
 00000097  4B				dec ebx;; dekrementacja indeksu
 00000098  75 F1			jnz wez_slowo

				;	jz last_word

 0000009A				foundSpace: 
 0000009A  8B D3			mov edx, ebx ; save space index
 0000009C  83 C3 01			add ebx,1 ; index of the first letter of the second word --> wczesniej waskuzuje na spacje
					;sub ecx,2

					;wrtie word
 0000009F				write_word:
 0000009F  8A 93 0000002E R		mov dl, magazyn[ebx]  ; pobranie kolejnego znaku
					
 000000A5  88 96 00000038 R		mov magazyn2[esi],dl



 000000AB  43				inc ebx ; magazyn inkrementacja indeks
 000000AC  46				inc esi ; magazyn2 inkrementacja indeks
					; sterowanie pêtl¹
 000000AD  83 EF 01			sub edi,1
 000000B0  75 ED			jnz write_word

					;wstaw spacje
					;ed = 0
					
					;mov magazyn2[esi],dl

					

 000000B2  FF 0D 0000004B R		dec liczba_spacji
 000000B8  75 D1			jnz wez_slowo


 000000BA  83 EA 01			sub edx, 1 ; go one char back, to have the last letter of the first word
 000000BD  BA 00000000			mov edx, 0
 000000C2  BB 00000000			mov ebx, 0 ; start index

 000000C7				last_word:
 000000C7  8A 93 0000002E R		mov dl, magazyn[ebx]  ; pobranie kolejnego znaku
					
					;mov magazyn2[esi],dl

 000000CD  43				inc ebx ; magazyn inkrementacja indeks
 000000CE  46				inc esi ; magazyn2 inkrementacja indeks
					; sterowanie pêtl¹
 000000CF  83 EF 01			sub edi,1
 000000D2  75 F3			jnz last_word

					

 000000D4				wypisz_koncowy:

 000000D4  B9 0000000A			mov ecx,(OFFSET koniec_magazyn2) - (OFFSET magazyn2)
 000000D9  51				push ecx
 000000DA  68 00000038 R		push OFFSET magazyn2 ; adres tekstu
 000000DF  6A 01			push 1 ; nr urz¹dzenia (tu: ekran - nr 1)
 000000E1  E8 00000000 E		call __write ; wyœwietlenie tekstu pocz¹tkowego
 000000E6  83 C4 0C			add esp, 12 ; usuniecie parametrów ze stosu



 000000E9  6A 00			push 0
 000000EB  E8 00000000 E		call _ExitProcess@4 ; zakoñczenie programu
 000000F0			_main ENDP
				END
Microsoft (R) Macro Assembler Version 14.28.29335.0	    11/09/21 12:29:19
lab2v4.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000060 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000F0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_main  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F0 Public
  policzspacje . . . . . . . . .	L Near	 00000035 _TEXT	
  niemaspacji  . . . . . . . . .	L Near	 00000046 _TEXT	
  przepiszslowo  . . . . . . . .	L Near	 0000008B _TEXT	
  wez_slowo  . . . . . . . . . .	L Near	 0000008B _TEXT	
  checkIfSpace . . . . . . . . .	L Near	 00000091 _TEXT	
  foundSpace . . . . . . . . . .	L Near	 0000009A _TEXT	
  write_word . . . . . . . . . .	L Near	 0000009F _TEXT	
  last_word  . . . . . . . . . .	L Near	 000000C7 _TEXT	
  wypisz_koncowy . . . . . . . .	L Near	 000000D4 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_ExitProcess@4 . . . . . . . . .	L Near	 00000000 FLAT	External
_MessageBoxA@16  . . . . . . . .	L Near	 00000000 FLAT	External
_MessageBoxW@16  . . . . . . . .	L Near	 00000000 FLAT	External
__read . . . . . . . . . . . . .	L Near	 00000000 FLAT	External
__write  . . . . . . . . . . . .	L Near	 00000000 FLAT	External
koniec_magazyn2  . . . . . . . .	Byte	 00000042 _DATA	
koniec_t . . . . . . . . . . . .	Byte	 0000002D _DATA	
liczba_spacji  . . . . . . . . .	DWord	 0000004B _DATA	
liczba_znakow2 . . . . . . . . .	DWord	 00000047 _DATA	
liczba_znakow  . . . . . . . . .	DWord	 00000043 _DATA	
magazyn2 . . . . . . . . . . . .	Byte	 00000038 _DATA	
magazyn  . . . . . . . . . . . .	Byte	 0000002E _DATA	
tekst_pocz . . . . . . . . . . .	Byte	 00000000 _DATA	
tytul  . . . . . . . . . . . . .	Byte	 0000004F _DATA	

	   0 Warnings
	   0 Errors
